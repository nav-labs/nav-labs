/*

  Convenient helper file for the most commonly used site JS files.

*/

(function() {
  var cookieBannerElement;
  var dismissCookieBannerButton;
  var cookieName = 'cookie_banner_ack';

  function handleButtonClick(ev) {
    setCookie();
    dismissBanner();
  }

  function dismissBanner() {
    cookieBannerElement.classList.add('dismissed');
  }

  function setCookie() {
    var expires = new Date();
    var cookieString = cookieName + '=ack';

    expires.setYear(expires.getFullYear() + 10);

    cookieString += ';expires=' + expires.toGMTString();
    cookieString += ';domain=' + document.domain;

    document.cookie = cookieString;
  }

  function init() {
    cookieBannerElement = document.querySelector('[rel="cookie-notification"]');
    dismissCookieBannerButton = document.querySelector(
      '[rel="dismiss-cookie-notification"]'
    );

    if (dismissCookieBannerButton) {
      dismissCookieBannerButton.addEventListener('click', handleButtonClick);
    }
  }

  document.addEventListener('DOMContentLoaded', init);
})();

// legacy readConfig function.
function readConfig(id) {
  function unescape(html) {
    return String(html)
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, '\'')
    .replace(/&#x2F;/g, '/')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
  }
  // Older browsers that don't support CSP or JSON.parse can use new Function
  var rvalidchars = /^[\],:{}\s]*$/;
  var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
  var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
  var elem = document.getElementById(id);
  if (!elem) return null;
  // We'd prefer innerText, but old IEs don't give us innerText for script elems :/
  var text = unescape((elem.textContent || elem.innerHTML).replace(/^\s+|\s+$/gm,''));
  if ( rvalidchars.test(text.replace(rvalidescape, '@')
                  .replace(rvalidtokens, ']')
                  .replace(rvalidbraces, '')) ) {

    // Try to use the native JSON parser first
    return window.JSON && window.JSON.parse ?
      window.JSON.parse(text) :
      (new Function('return ' + text))();
  }
}


// only add the prefilter on pages that contain jQuery
if (window.$ && window.$.ajaxPrefilter) {
  $(function() {
    var findCsrfToken;
    findCsrfToken = function() {
      var csrfFormInputEl, csrfMetaEl;
      csrfFormInputEl = $('form input[name=csrf-token]');
      if (csrfFormInputEl.length > 0) {
        return csrfFormInputEl.attr('value');
      }
      csrfMetaEl = $('meta[name=csrf-token]');
      if (csrfMetaEl.length > 0) {
        return csrfMetaEl.attr('content');
      }
      return '';
    };
    return $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
      var csrfToken;
      csrfToken = findCsrfToken();
      return jqXHR.setRequestHeader('x-stripe-csrf-token', csrfToken);
    });
  });
}

"use strict";

// Utility functions
var Strut = {

  // Random float between min and max
  random: function(min, max) {
    return Math.random() *  (max - min) + min;
  },

  // Returns a random item from an array
  arrayRandom: function(arr) {
    return arr[ Math.floor( Math.random() * arr.length ) ];
  },

  // Linear interpolation between a and b
  // Ex: (100, 200, 0.5) = 150
  interpolate: function(a, b, i) {
    return a*(1-i) + b*i;
  },

  // Calculate how far i is between a and b
  // Ex: (100, 200, 150) = 0.5
  rangePosition: function(a, b, i) {
    return (i-a) / (b-a);
  },

  // Limits a number on both min and max ends
  clamp: function(num, min, max) {
    return Math.max( Math.min( num, max ), min );
  },

  // querySelectorAll as an array
  queryArray: function(selector, node) {
    if (!node) node = document.body;
    return Array.prototype.slice.call(node.querySelectorAll(selector));
  },

  // Handle DOMContentLoaded after document has already been loaded
  ready: function(fn) {
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn);
  },

  debounce: function (fn, time) {
    let timeout;

    return function() {
      var functionCall = function() {
        return fn.apply(this, arguments);
      }

      clearTimeout(timeout);
      timeout = setTimeout(functionCall, time);
    }
  },

  throttle: function(callback, wait, context) {
    var c = context || this;
    var timeout = null;
    var callbackArgs = null;

    var later = function() {
      callback.apply(c, callbackArgs);
      timeout = null;
    }

    return function() {
      if (!timeout) {
        callbackArgs = arguments;
        timeout = setTimeout(later, wait);
      }
    }
  }

};

// Retina detection -- matches `@media (--retina)`

Strut.isRetina = window.devicePixelRatio > 1.3;

// Mobile viewport detection, also matching our media queries

Strut.mobileViewportWidth = 670;
Strut.isMobileViewport = window.innerWidth < Strut.mobileViewportWidth;

window.addEventListener('resize', function() {
  Strut.isMobileViewport = window.innerWidth < Strut.mobileViewportWidth;
});

// Touch helpers

Strut.touch = {
  isSupported: 'ontouchstart' in window || navigator.maxTouchPoints,
  isDragging: false
};

document.addEventListener('DOMContentLoaded', function() {

  document.body.addEventListener('touchmove', function() {
    Strut.touch.isDragging = true;
  });

  document.body.addEventListener('touchstart', function() {
    Strut.touch.isDragging = false;
  });

});

// Async (pre)loading of resources

Strut.load = {

  images: function(urls, callback) {
    if (typeof urls === 'string') urls = [urls];

    var progress = -urls.length;

    urls.forEach(function(url) {
      var img = new Image();
      img.src = url;

      img.onload = function(){
        progress++;
        if (progress === 0 && callback) callback();
      };
    });
  },

  css: function(url, callback) {
    var el = document.createElement('link');
    var fileMap = window.readConfig('strut_files') || {};
    var realUrl = fileMap[url];
    if (!realUrl) {
      throw new Error('CSS file "' + url + '" not found in strut_files config');
    }
    el.href = realUrl;
    el.rel = 'stylesheet';
    document.head.appendChild(el);

    if (callback) el.onload = callback;
  },

  js: function(url, callback) {
    var el = document.createElement('script');
    var fileMap = window.readConfig('strut_files') || {};
    var realUrl = fileMap[url];
    if (!realUrl) {
      throw new Error('Javascript file "' + url + '" not found in strut_files config');
    }
    el.src = realUrl;
    el.async = false; // keep the execution order
    document.head.appendChild(el);

    if (callback) el.onload = callback;
  },

};

// Feature detection
// Yes, we should just include modernizr once we have too many of these

Strut.supports = {

  // ES6 support

  es6: !!window.Symbol && !!window.Symbol.species,

  // CSS pointer-events (missing in IE10 and below)
  // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/css/pointerevents.js

  pointerEvents: (function() {
    var style = document.createElement('a').style;
    style.cssText = 'pointer-events:auto';
    return style.pointerEvents === 'auto';
  })(),

  // CSS position: sticky

  positionSticky: Boolean(window.CSS && CSS.supports("(position: -webkit-sticky) or (position: sticky)")),

  // CSS masks or clip-path
  // Replace with a better test once IE support changes -- http://caniuse.com/#search=mask

  masks: (function() {
    return !(/MSIE|Trident|Edge/i.test(navigator.userAgent))
  })(),

};

/*

  Global page navigation

*/


function globalNavDropdowns(selector) {
  var self = this;
  this.container = document.querySelector(selector)
  this.root = this.container.querySelector('.navRoot');

  // Layout

  this.primaryNav = this.root.querySelector('.navSection.primary');
  this.primaryNavItem = this.root.querySelector('.navSection.primary .rootLink:last-child');
  this.secondaryNavItem = this.root.querySelector('.navSection.secondary .rootLink:first-child');

  this.checkCollision();
  window.addEventListener('load', this.checkCollision.bind(this));
  window.addEventListener('resize', this.checkCollision.bind(this));

  // Dropdowns

  this.container.classList.add('noDropdownTransition');

  this.dropdownBackground = this.container.querySelector('.dropdownBackground');
  this.dropdownBackgroundAlt = this.container.querySelector('.alternateBackground');
  this.dropdownRoot = this.container.querySelector('.dropdownRoot');
  this.dropdownContainer = this.container.querySelector('.dropdownContainer');
  this.dropdownArrow = this.container.querySelector('.dropdownArrow');
  this.dropdownRoots = Strut.queryArray('.hasDropdown', this.root);

  this.dropdownSections = Strut.queryArray('.dropdownSection', this.container).map(function(section){
    return {
      el: section,
      name: section.getAttribute('data-dropdown'),
      content: section.querySelector('.dropdownContent')
    }
  });

  // Event handling

  var events = window.PointerEvent ? {
    end: 'pointerup',
    enter: 'pointerenter',
    leave: 'pointerleave'
  } : {
    end: 'touchend',
    enter: 'mouseenter',
    leave: 'mouseleave'
  };

  this.keyDownHandler = null;

  // Root menu items
  this.dropdownRoots.forEach(function(rootEl, i) {

    rootEl.addEventListener(events.end, function(e) {
      e.preventDefault(); // Prevent mouseenter
      e.stopPropagation(); // Stop from propagating to body
      self.toggleDropdown(rootEl);
    });

    rootEl.addEventListener('focusin', function(e) {
      self.stopCloseTimeout();
      self.openDropdown(rootEl, {keyboardNavigation: true});
    });

    rootEl.addEventListener(events.enter, function(e) {
      if (e.pointerType == 'touch') return;
      self.stopCloseTimeout();
      self.openDropdown(rootEl);
    });

    rootEl.addEventListener(events.leave, function(e) {
      if (e.pointerType == 'touch') return;
      self.startCloseTimeout();
    });

  });

  // Dropdown container

  this.dropdownContainer.addEventListener(events.end, function(e) {
    e.stopPropagation(); // Stop from propagating to body
  });

  this.dropdownContainer.addEventListener(events.enter, function(e) {
    if (e.pointerType == 'touch') return;
    self.stopCloseTimeout();
  });

  this.dropdownContainer.addEventListener(events.leave, function(e) {
    if (e.pointerType == 'touch') return;
    self.startCloseTimeout();
  });

  // Body

  document.body.addEventListener(events.end, function(e) {
    if (!Strut.touch.isDragging) self.closeDropdown();
  });

  this.container.classList.add('initialized');
}

globalNavDropdowns.prototype.checkCollision = function() {
  var self = this;

  if (Strut.isMobileViewport) return;

  if (self.compact == true) {
    var bw = document.body.clientWidth;
    var pncr = self.primaryNav.getBoundingClientRect();

    // Test if primary nav is too far to the right/off-center
    if (pncr.left + pncr.width/2 > bw/2) {
      self.container.classList.remove('compact');
      self.compact = false;
    }

  } else {
    var picr = self.primaryNavItem.getBoundingClientRect();
    var sicr = self.secondaryNavItem.getBoundingClientRect();

    // Test if primary nav overlaps secondary nav
    if (picr.right > sicr.left) {
      self.container.classList.add('compact');
      self.compact = true;
    }
  }
}

globalNavDropdowns.prototype.registerArrowKeyNavigation = function(rootEl, dropdownEl) {
  var self = this;

  if (this.keyDownHandler !== null) {
    this.unregisterArrowKeyNavigation();
  }

  var dropdownElements = [].slice.call(dropdownEl.querySelectorAll("a"));
  var keyboardCursorPos = 0;
  dropdownElements[keyboardCursorPos].focus();

  this.keyDownHandler = function(e) {
    var TAB = 9;
    var ARROW_UP = 38;
    var ARROW_DOWN = 40;

    if (e.keyCode === TAB) {
      // Focus the top-level navigation item again to enable navigation between tabs
      rootEl.focus();
      self.startCloseTimeout();
    } else if (e.keyCode === ARROW_UP) {
      // Prevent scrolling
      e.preventDefault();

      keyboardCursorPos--;
      if (keyboardCursorPos < 0) {
        keyboardCursorPos += dropdownElements.length
      }

      dropdownElements[keyboardCursorPos].focus();
    } else if (e.keyCode === ARROW_DOWN) {
      // Prevent scrolling
      e.preventDefault();

      keyboardCursorPos++;
      if (keyboardCursorPos >= dropdownElements.length) {
        keyboardCursorPos -= dropdownElements.length;
      }

      dropdownElements[keyboardCursorPos].focus();
    }
  };

  this.container.addEventListener("keydown", this.keyDownHandler);
}

globalNavDropdowns.prototype.unregisterArrowKeyNavigation = function() {
  this.container.removeEventListener("keydown", this.keyDownHandler);
  this.keyDownHandler = null;
}

globalNavDropdowns.prototype.openDropdown = function(rootEl, options) {
  var self = this;

  if (this.activeDropdown === rootEl) return;

  this.container.classList.add('overlayActive');
  this.container.classList.add('dropdownActive');
  this.activeDropdown = rootEl;
  this.activeDropdown.setAttribute('aria-expanded', 'true');

  // Highlight menu item

  this.dropdownRoots.forEach(function(rootEl, i) {
    rootEl.classList.remove('active');
  });

  rootEl.classList.add('active');

  // Show correct section

  var dropdownName = rootEl.getAttribute('data-dropdown');
  var className = 'left';
  var ddWidth, ddHeight;
  var activeContent;

  this.dropdownSections.forEach(function(section){
    section.el.classList.remove('active');
    section.el.classList.remove('left');
    section.el.classList.remove('right');

    if (section.name == dropdownName) {
      section.el.setAttribute('aria-hidden', 'false');
      section.el.classList.add('active');
      className = 'right';
      ddWidth = section.content.offsetWidth;
      ddHeight = section.content.offsetHeight;
      if (!section.content.getAttribute('data-fixed')) {
        // Prevents reflow of the dropdown content
        section.content.style.width = ddWidth + 'px';
        section.content.style.height = ddHeight + 'px';
      } else {
        section.content.setAttribute('data-fixed', true);
      }
      activeContent = section.content;

      if (options && options.keyboardNavigation) {
        self.registerArrowKeyNavigation(rootEl, section.el);
      }
    } else {
      section.el.classList.add(className);
      section.el.setAttribute('aria-hidden', 'true');
    }
  });

  // Move dropdown container

  var origWidth = 380;
  var origHeight = 400;

  var scaleX = ddWidth / origWidth;
  var scaleY = ddHeight / origHeight;

  var rootLinkRect = rootEl.getBoundingClientRect();
  var ddLeft = rootLinkRect.left + rootLinkRect.width/2 - ddWidth/2;
  ddLeft = Math.round(Math.max(ddLeft, 10));

  clearTimeout(this.disableTransitionTimeout);

  this.enableTransitionTimeout = setTimeout(function(){
    self.container.classList.remove('noDropdownTransition');
  }, 50);

  this.dropdownBackground.style.transform = 'translateX(' + ddLeft + 'px) scaleX(' + scaleX + ') scaleY(' + scaleY + ')';

  this.dropdownContainer.style.transform = 'translateX(' + ddLeft + 'px)';
  this.dropdownContainer.style.width = ddWidth + 'px';
  this.dropdownContainer.style.height = ddHeight + 'px';

  // Move arrow

  var arrLeft = Math.round(rootLinkRect.left + rootLinkRect.width/2);
  this.dropdownArrow.style.transform = 'translateX(' + arrLeft + 'px) rotate(45deg)';

  // Move alternating background

  var bgOffset = activeContent.children[0].offsetHeight / scaleY;
  this.dropdownBackgroundAlt.style.transform = 'translateY(' + bgOffset + 'px)'

  if(window.siteAnalytics && window.siteAnalytics.trackGlobalNavDropdownOpen) {
    window.siteAnalytics.trackGlobalNavDropdownOpen(dropdownName);
  }
}

globalNavDropdowns.prototype.closeDropdown = function() {
  var self = this;

  if (!this.activeDropdown) return;

  this.dropdownRoots.forEach(function(rootEl, i) {
    rootEl.classList.remove('active');
  });

  this.dropdownContainer
    .querySelector('[aria-hidden="false"]')
    .setAttribute('aria-hidden', 'true');

  // Disable transitions for the next time a dropdown opens

  clearTimeout(this.enableTransitionTimeout);

  this.disableTransitionTimeout = setTimeout(function(){
    self.container.classList.add('noDropdownTransition');
  }, 50);

  // Hide dropdown

  this.container.classList.remove('overlayActive');
  this.container.classList.remove('dropdownActive');
  this.activeDropdown.setAttribute('aria-expanded', 'false');
  this.activeDropdown = undefined;

  this.unregisterArrowKeyNavigation();
}

globalNavDropdowns.prototype.toggleDropdown = function(rootEl) {
  if (this.activeDropdown === rootEl) this.closeDropdown();
  else this.openDropdown(rootEl);
}

globalNavDropdowns.prototype.startCloseTimeout = function() {
  var self = this;

  self.closeDropdownTimeout = setTimeout(function(){
    self.closeDropdown();
  }, 50);
}

globalNavDropdowns.prototype.stopCloseTimeout = function() {
  var self = this;

  clearTimeout(self.closeDropdownTimeout);
}




/*

  Popups for mobile nav and footer

*/


function globalNavPopup(selector) {
  var self = this;

  var clickEvent = Strut.touch.isSupported ? "touchend" : "click";
  this.activeClass = 'globalPopupActive';

  this.root = document.querySelector(selector);
  this.link = this.root.querySelector('.rootLink');
  this.popup = this.root.querySelector('.popup');
  this.closeButton = this.root.querySelector('.popupCloseButton');

  this.link.addEventListener(clickEvent, function(e) {
    e.stopPropagation();
    self.togglePopup();
  });

  this.popup.addEventListener(clickEvent, function(e) {
    e.stopPropagation();
  });

  // Push the popup down if it extends past the top of the viewport
  this.popup.addEventListener('transitionend', function(e) {
    if (self.isOpening) {
      self.isOpening = false;
      var top = self.popup.getBoundingClientRect().top + window.scrollY;
      if (top < 15) {
        var offset = 15 - top;
        self.popup.style.transform = 'translateY(' + offset + 'px)';
      }
    }
  });

  if (this.closeButton) {
    this.closeButton.addEventListener(clickEvent, function(e) {
      self.closeAllPopups();
    });
  }

  document.body.addEventListener(clickEvent, function(e) {
    if (!Strut.touch.isDragging) self.closeAllPopups();
  }, false);
}

globalNavPopup.prototype.togglePopup = function() {
  var alreadyOpen = this.root.classList.contains(this.activeClass);
  this.closeAllPopups(true);

  if (!alreadyOpen) {
    this.root.classList.add(this.activeClass);
    this.isOpening = true;
    // document.documentElement.classList.add('popupActive');
  }
}

globalNavPopup.prototype.closeAllPopups = function(keep) {
  var popupRoots = document.getElementsByClassName(this.activeClass);
  for (var i = 0; i < popupRoots.length; i++) {
    popupRoots[i].querySelector('.popup').style.transform = null;
    popupRoots[i].classList.remove(this.activeClass);
  }
  // document.documentElement.classList.remove('popupActive');
}


/*

  Init

*/

if (!Strut.supports.pointerEvents) {
  Strut.load.css('v3/shared/navigation_ie10.css');
}

Strut.ready(function(){
  new globalNavDropdowns('.globalNav');
  new globalNavPopup('.globalNav .navSection.mobile');
  new globalNavPopup('.globalFooterNav .select.country');
  new globalNavPopup('.globalFooterNav .select.language');

  /*
    Attempt to detect when user is navigating with keyboard to
    enable focus highlights on nav elements
  */

  document.body.addEventListener('keydown', function(e) {
    var TAB = 9;
    if (e.keyCode == TAB) document.body.classList.add('keyboard-navigation');
  });

  document.body.addEventListener('click', function(e) {
    document.body.classList.remove('keyboard-navigation');
  });
});


// Basic functionality for site analytics. Site-specific analytics
// (recording button clicks, interactions, etc) should ultimately go
// through these functions. Stripe's Analytics.js is used to actually
// send events to the server. Site JS should use these functions,
// and not call functions on Analytics directly.

// When Analytics.js is not present/not yet loaded, these functions
// enqueue analytics calls and then flush them out to Analytics.js
// when it is present.

(function() {
  'use strict';

  window.siteAnalytics = window.siteAnalytics || {};
  window.siteAnalyticsUtil = window.siteAnalyticsUtil || {};

  var analyticsConfigDataSent = false;
  var debugFlag = 'SITE_ANALYTICS_DEBUG';
  var eventQueue = [];
  var readyTimer;
  var readyTimerWaitInitial = 250;
  var readyTimerWait = readyTimerWaitInitial;
  var readyTimerWaitBackoff = 1.3;

  function debug() {
    var args = [].slice.call(arguments);

    if (debugActive()) {
      console.log.apply(console, args);
    }
  }

  function allAnalyticsConfigData() {
    return readConfig('site-analytics-config') || {};
  }

  // General analytics config, sent to Analytics.js
  function generalAnalyticsConfigData() {
    var allAnalyticsConfig = allAnalyticsConfigData();

    return allAnalyticsConfig.generalAnalyticsConfig || {};
  }

  // Site-specific analytics config, not sent to Analytics.js
  function siteAnalyticsConfigData() {
    var allAnalyticsConfig = allAnalyticsConfigData();

    return allAnalyticsConfig.siteSpecificAnalyticsConfig || {};
  }

  function debugActive() {
    return !!window[debugFlag];
  }

  function emitAction(name, params) {
    emit('action', name, params);
  }

  function emitActionOnce(name, params) {
    emit('actionOnce', name, params);
  }

  function emitModal(name, params) {
    emit('modal', name, params);
  }

  function emitViewed(name, params) {
    emit('viewed', name, params);
  }

  // Send event to Analytics.js if present, otherwise enqueue
  function emit(method, name, params) {
    if (window.Analytics) {
      doAnalyticsCall(method, name, params);
    } else {
      enqueue(method, name, params);
    }
  }

  // Actually send event to Analytics.js
  function doAnalyticsCall(method, name, params) {
    sendConfigData();

    var mergedParams = mergeDefaultParams(params);

    window.Analytics[method](name, mergedParams);

    debug('emit', method, name, mergedParams);
  }

  function sendConfigData() {
    if (analyticsConfigDataSent) {
      return;
    }

    window.Analytics.configure(generalAnalyticsConfigData());

    analyticsConfigDataSent = true;

    debug('Sent config data');
  }

  // Add events to queue, to be flushed when Analytics.js loads
  function enqueue(method, name, params) {
    eventQueue.push([method, name, params]);
    startReadyTimer();
    debug('enqueue', method, name, params);
  }

  function flushEventQueue() {
    debug('Flushing event queue');

    sendConfigData();

    eventQueue.forEach(function(event) {
      doAnalyticsCall.apply(this, event);
    });
  }

  function mergeDefaultParams(params) {
    var mergedParams = generalAnalyticsConfigData();

    Object.keys(params || {}).forEach(function(k) {
      mergedParams[k] = params[k];
    });

    return mergedParams;
  }

  function startReadyTimer() {
    if (!readyTimer) {
      readyTimer = setTimeout(readyTimerCallback, readyTimerWait);
      readyTimerWait = readyTimerWait * readyTimerWaitBackoff;
    }
  }

  function readyTimerCallback() {
    readyTimer = null;

    if (window.Analytics) {
      flushEventQueue();
      readyTimerWait = readyTimerWaitInitial;
    } else {
      startReadyTimer();
      debug('Ready timer waiting ' + readyTimerWait + 'ms');
    }
  }

  function sendToGoogleAnalytics(googleAnalyticsParams) {
    if (!window.ga) {
      return;
    }

    window.ga.apply(this, googleAnalyticsParams);
    debug('ga', googleAnalyticsParams);
  }

  function sendToDataLayer(dataLayerInfo) {
    window.dataLayer.push(dataLayerInfo);

    debug('dataLayer', dataLayerInfo);
  }

  function init() {
    if (window.siteAnalyticsUtil.analyticsConfigData) {
      return;
    }

    startReadyTimer();

    window.siteAnalyticsUtil.debugActive = debugActive;
    window.siteAnalyticsUtil.emitAction = emitAction;
    window.siteAnalyticsUtil.emitActionOnce = emitActionOnce;
    window.siteAnalyticsUtil.emitModal = emitModal;
    window.siteAnalyticsUtil.emitViewed = emitViewed;
    window.siteAnalyticsUtil.siteAnalyticsConfig = siteAnalyticsConfigData;
    window.siteAnalyticsUtil.sendToGoogleAnalytics = sendToGoogleAnalytics;
    window.siteAnalyticsUtil.sendToDataLayer = sendToDataLayer;
    window.siteAnalyticsUtil.generalAnalyticsConfig = generalAnalyticsConfigData;
  }

  init();
})();
// Tracking for site that uses data attributes on elements to
// decide what to send to Analytics.

// `data-analytics-action` sends an action to Analytics,
// `data-analytics-modal` sends a modal event to Analytics.
// `data-analytics-source` provides a `source` parameter along with the
// action/modal event.

(function (){
  var actionAttribute = 'data-analytics-action';
  var sourceAttribute = 'data-analytics-source';
  var modalAttribute = 'data-analytics-modal';
  var googleAnalyticsAttribute = 'data-analytics-ga';

  function extractAnalyticsInfo(_el) {
    var el = findAnalyticsAttributes(_el);
    var analyticsInfo = {};

    if (el.getAttribute(actionAttribute)) {
      analyticsInfo.action = el.getAttribute(actionAttribute);
    }

    if (el.getAttribute(modalAttribute)) {
      analyticsInfo.modal = el.getAttribute(modalAttribute);
    }

    if (el.getAttribute(sourceAttribute)) {
      analyticsInfo.params = {source: el.getAttribute(sourceAttribute)};
    }

    if (el.getAttribute(googleAnalyticsAttribute)) {
      analyticsInfo.googleAnalyticsParams = JSON.parse(
        el.getAttribute(googleAnalyticsAttribute)
      );
    }

    if (el.getAttribute(sourceAttribute) &&
      el.getAttribute(sourceAttribute).indexOf('cta') !== -1) {
      analyticsInfo.trackCta = true;
    }

    return analyticsInfo;
  }

  function findAnalyticsAttributes(el) {
    if (el.getAttribute(actionAttribute) || el.getAttribute(modalAttribute)) {
      return el;
    }

    if (!el.parentNode || el.tagName === 'BODY') {
      return null;
    }

    return findAnalyticsAttributes(el.parentNode);
  }

  // Called from outside to check if element (or parent)
  // has analytics attributes.
  function hasAnalyticsAttributes(el) {
    return !!findAnalyticsAttributes(el);
  }

  // Called from outside when elements with analytics
  // attributes are found.
  function trackByAttributes(el) {
    var analyticsInfo = extractAnalyticsInfo(el);

    if (analyticsInfo.modal) {
      window.siteAnalyticsUtil.emitModal(
        analyticsInfo.modal, analyticsInfo.params
      );
    }

    if (analyticsInfo.action) {
      window.siteAnalyticsUtil.emitAction(
        analyticsInfo.action, analyticsInfo.params
      );
    }

    if (analyticsInfo.googleAnalyticsParams) {
      window.siteAnalyticsUtil.sendToGoogleAnalytics(
        analyticsInfo.googleAnalyticsParams
      );
    }

    if (analyticsInfo.trackCta) {
      trackCtaClick(el);
    }
  }

  function trackCtaClick(el) {
    var ctaType = el.getAttribute(actionAttribute) + '_' +
        el.getAttribute(sourceAttribute);

      window.siteAnalyticsUtil.sendToDataLayer({
        event: 'cta-button-click',
        'cta-type': ctaType,
        'click-url': el.href
      });
  }

  function init() {
    window.siteAnalytics.hasAnalyticsAttributes = hasAnalyticsAttributes;
    window.siteAnalytics.trackByAttributes = trackByAttributes;
    window.siteAnalytics.trackCtaClick = trackCtaClick;
  }

  init();
})();
(function() {
  var CLEARBIT_PUBLISHABLE_KEY = 'pk_5bf3234405eeb3bec2b2b88bc0ab0280';
  var CLEARBIT_DIMENSIONS = {
    companyDomain: 'dimension18',
    companyEmployeesRange: 'dimension19',
    companyRevenue: 'dimension20'
  };

  function injectClearbit() {
    if (!window.ga) {
      return;
    }

    var scriptEl = document.createElement('script');
    var scriptSrc = 'https://ga.clearbit.com/v1/ga.js?authorization=';

    scriptSrc = scriptSrc + CLEARBIT_PUBLISHABLE_KEY;

    scriptEl.async = true;
    scriptEl.src = scriptSrc;
    scriptEl.addEventListener('load', init);

    document.body.appendChild(scriptEl);
  }

  function init() {
    if (!window.ga) {
      return;
    }

    ga('require', 'Clearbit', {
      mapping: CLEARBIT_DIMENSIONS
    });
  }

  // Don't load Clearbit until we get a new account
  // window.addEventListener('load', injectClearbit);
})();

(function() {
  var FB_TRACKING_ID = '742650679237989';

  function injectFBTracking() {
    // This blob of JS comes from Facebook
    !function(f,b,e,v,n,t,s)
    {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
    n.callMethod.apply(n,arguments):n.queue.push(arguments)};
    if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
    n.queue=[];t=b.createElement(e);t.async=!0;
    t.src=v;s=b.getElementsByTagName(e)[0];
    s.parentNode.insertBefore(t,s)}(window,document,'script',
    'https://connect.facebook.net/en_US/fbevents.js');
  }

  function initFBTracking() {
    if (!window.fbq) {
      return;
    }

    window.fbq('init', FB_TRACKING_ID);
  }

  function trackFacebookEvent(eventName) {
    if (!window.fbq || !eventName) {
      return;
    }

    window.fbq('track', eventName);

    if (window.siteAnalyticsUtil.debugActive()) {
      console.log('FB track', eventName);
    }
  }

  function init() {
    injectFBTracking();
    initFBTracking();

    window.siteAnalytics.trackFacebookEvent = trackFacebookEvent;

    trackFacebookEvent('PageView');
  }

  init();
})();

// Analytics tracking for the footer nav popups on "Songbird" layout.
(function() {
  function languageClickHandler(ev) {
    if (!ev.currentTarget.hasAttribute('data-language')) {
      return;
    }

    var newLanguage = ev.currentTarget.getAttribute('data-language');

    window.siteAnalytics.trackLanguageChange(newLanguage);
  }

  function countryClickHandler(ev) {
    if (!ev.currentTarget.hasAttribute('data-country')) {
      return;
    }

    var newCountry = ev.currentTarget.getAttribute('data-country');

    window.siteAnalytics.trackCountryChange(newCountry);
  }

  // Listen for clicks on language menu
  function listenForLanguageClicks() {
    var languageLinks = [].slice.call(document.querySelectorAll(
      '.languagePicker a[data-language]'
    ));

    languageLinks.forEach(function(linkEl) {
      linkEl.addEventListener('click', languageClickHandler);
    });
  }

  // Listen for clicks on country menu
  function listenForCountryClicks() {
    var countryLinks = [].slice.call(document.querySelectorAll(
      '.countryPicker a[data-country]'
    ));

    countryLinks.forEach(function(linkEl) {
      linkEl.addEventListener('click', countryClickHandler);
    });
  }

  function init() {
    listenForLanguageClicks();
    listenForCountryClicks();
  }

  document.addEventListener('DOMContentLoaded', init);
})();

// Analytics tracking for forms on site. Tracking when form
// input values change and forms are submitted.

(function() {
  var formChangeAction = 'form_input';
  var formSubmitAction = 'form_submit';

  function isInForm(el) {
    return el.matches('form *');
  }

  function formChangeHandler(ev) {
    if (!isInForm(ev.target)) {
      return;
    }

    window.siteAnalyticsUtil.emitAction(formChangeAction, {
      name: ev.target.getAttribute('name'),
      value: ev.target.value
    });
  }

  function submitHandler(ev) {
    if (ev.target.tagName !== 'FORM') {
      return;
    }

    window.siteAnalyticsUtil.emitAction(formSubmitAction);
  }

  function init() {
    document.addEventListener('change', formChangeHandler);
    document.addEventListener('submit', submitHandler);
  }

  init();
})();
// Analytics tracking for the top nav dropdowns on "Songbird" layout.

(function() {
  var dropdownAction = 'nav_dropdown_open';
  var seenDropdowns = {};

  function trackGlobalNavDropdownOpen(dropdownName) {
    if (seenDropdowns[dropdownName]) {
      return;
    }

    seenDropdowns[dropdownName] = true;

    window.siteAnalyticsUtil.emitAction(dropdownAction, {
      dropdown: dropdownName
    });
  }

  function init() {
    window.siteAnalytics.trackGlobalNavDropdownOpen = trackGlobalNavDropdownOpen;
  }

  init();
})();

(function(){
  function falsyToUndefined(o) {
    var result = {};

    Object.keys(o).forEach(function(key) {
      var value = o[key];

      result[key] = value || undefined;
    });

    return result;
  }

  function loadGTMConfig() {
    var gtmConfig = readConfig('site-gtm-config') || {};

    gtmConfig = falsyToUndefined(gtmConfig);

    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push(gtmConfig);
  }

  function init() {
    loadGTMConfig();
  }

  document.addEventListener('DOMContentLoaded', init);
})();

(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-K8JKCBR');

// Analytics tracking for the "Notebook" on the V3/Songbird home page,
// interactive icosahedron and fraud chart on /radar, and
// Apple Pay demo on /apple-pay.

(function() {
  var radarIcosahedronAction = 'radar_icosahedron';
  var radarFraudChartAction = 'radar_fraud_chart';
  var homePageNotebookAction = 'home_page_notebook';
  var connectRoutingDiagramAction = 'connect_routing_diagram';
  var billingInfraDiagramPricingPlanAction  ='billing_infra_diagram';
  var billingInfraDiagramNodeAction = 'billing_node_open';
  var billingInteractiveInvoiceAction = 'billing_interactive_invoice_section';
  var sigmaQueryCategoryAction = 'query_category';
  var sigmaQueryExampleAction = 'query_example';
  var sigmaPricingSliderAction = 'pricing_slider';
  var seenNoteBookButtons = {};
  var seenPaymenRoutingButtons = {};
  var seenBillingInfraButtons = {};
  var seenBillingInfraNodeCombos = {};
  var seenBillingInteractiveSections = {};

  function trackRadarIcosahedron() {
    window.siteAnalyticsUtil.emitActionOnce(radarIcosahedronAction);
  }

  function trackRadarFraudChart() {
    window.siteAnalyticsUtil.emitActionOnce(radarFraudChartAction);
  }

  function trackHomePageNotebook(selectedButton) {
    var buttonText = selectedButton.innerText.trim().toLowerCase();

    if (seenNoteBookButtons[buttonText]) {
      return;
    }

    seenNoteBookButtons[buttonText] = true;

    window.siteAnalyticsUtil.emitAction(homePageNotebookAction, {
      text: buttonText
    });
  }


  function trackConnectRoutingDiagram(selectedButton) {
    var buttonText = selectedButton.innerText.trim().toLowerCase();

    if (seenPaymenRoutingButtons[buttonText]) {
      return;
    }

    seenNoteBookButtons[buttonText] = true;

    window.siteAnalyticsUtil.emitAction(connectRoutingDiagramAction, {
      text: buttonText
    });
  }

  function trackBillingInfraDiagramPricingPlan(selectedButton) {
    var buttonText = selectedButton.innerText.trim().toLowerCase();

    if (seenBillingInfraButtons[buttonText]) return;

    seenBillingInfraButtons[buttonText] = true;

    window.siteAnalyticsUtil.emitAction(billingInfraDiagramPricingPlanAction, {
      text: buttonText
    });
  }

  function trackBillingInfraDiagramNode(node, pricingPlan) {
    var nodeType = node.dataset.nodeType;
    var nodeDescription = node.dataset.nodeDescription;
    var subtitle = node.querySelector('.infra-node__meta').textContent.trim().toLowerCase();

    var key = pricingPlan + '-' + nodeType + '-' + subtitle;
    if (seenBillingInfraNodeCombos[key]) return;

    seenBillingInfraNodeCombos[key] = true;

    window.siteAnalyticsUtil.emitAction(billingInfraDiagramNodeAction, {
      infra_selectedPlan: pricingPlan,
      infra_node_type: nodeType,
      infra_node_meta: subtitle,
      infra_node_description: nodeDescription,
    });
  }

  function trackBillingInteractiveInvoice(button) {
    var section = button.dataset.target;

    if (seenBillingInteractiveSections[section]) return;

    seenBillingInteractiveSections[section] = true;

    window.siteAnalyticsUtil.emitAction(billingInteractiveInvoiceAction, {
      section: section
    });
  }

  function trackSigmaQueryCategory(categorySlug) {
    window.siteAnalyticsUtil.emitAction(sigmaQueryCategoryAction, {
      category: categorySlug
    });
  }

  function trackSigmaQueryExample(queryExample) {
    window.siteAnalyticsUtil.emitAction(sigmaQueryCategoryAction, {
      query: queryExample
    });
  }

  function trackSigmaPricingSlider() {
    window.siteAnalyticsUtil.emitActionOnce(sigmaPricingSliderAction);
  }

  function trackDocsPageView() {
    window.siteAnalyticsUtil.sendToDataLayer({
      event: 'virtual-pageview',
      url: document.location.href,
      title: document.title
    });
  }

  function trackLanguageChange(newLanguage) {
    window.siteAnalyticsUtil.sendToDataLayer({
      event: 'site-language-change',
      language: newLanguage
    });
  }

  function trackCountryChange(newCountry) {
    window.siteAnalyticsUtil.sendToDataLayer({
      event: 'site-country-change',
      country: newCountry
    });
  }

  function trackConnectExpressDemoCta() {
    window.siteAnalyticsUtil.sendToGoogleAnalytics([
      'send', 'event', 'Click', 'Try Demo', 'demo'
    ]);
  }

  function init() {
    window.siteAnalytics.trackBillingInfraDiagramPricingPlan = trackBillingInfraDiagramPricingPlan;
    window.siteAnalytics.trackBillingInfraDiagramNode = trackBillingInfraDiagramNode;
    window.siteAnalytics.trackBillingInteractiveInvoice = trackBillingInteractiveInvoice;
    window.siteAnalytics.trackConnectExpressDemoCta = trackConnectExpressDemoCta;
    window.siteAnalytics.trackConnectRoutingDiagram = trackConnectRoutingDiagram;
    window.siteAnalytics.trackCountryChange = trackCountryChange;
    window.siteAnalytics.trackDocsPageView = trackDocsPageView;
    window.siteAnalytics.trackHomePageNotebook = trackHomePageNotebook;
    window.siteAnalytics.trackLanguageChange = trackLanguageChange;
    window.siteAnalytics.trackRadarIcosahedron = trackRadarIcosahedron;
    window.siteAnalytics.trackRadarFraudChart = trackRadarFraudChart;
    window.siteAnalytics.trackSigmaQueryCategory = trackSigmaQueryCategory;
    window.siteAnalytics.trackSigmaQueryExample = trackSigmaQueryExample;
    window.siteAnalytics.trackSigmaPricingSlider = trackSigmaPricingSlider;
  }

  init();
})();

// Analytics tracking for inline links on site. Listens to all clicks
// and attempts to match the target with a link ancestor.

(function() {
  var inlineLinkAction = 'inline_link';
  var buttonAction = 'button';
  var pdfLinkAction = 'pdf_link';

  function shouldTrack(linkEl) {
    return !!linkEl.getAttribute('href');
  }

  function normalizeLinkText(text) {
    return text.trim().replace(/\s+/g, ' ');
  }

  // Classify the analytics action name we will track for this link.
  // If it links to a PDF, track it as pdf_link.
  // If it appears as a button or does not link to a URL, track it as a button.
  // Otherwise track it as an inline link.
  function extractLinkAction(linkEl) {
    var linkClass = linkEl.className.toLowerCase();
    var linkHref = linkEl.getAttribute('href');
    var pdfRegex = /\.pdf$|\.pdf#|\.pdf\?/i;

    if (pdfRegex.test(linkEl.href)) {
      return pdfLinkAction;
    }

    if (linkClass.indexOf('button') !== -1 || linkHref === '#') {
      return buttonAction;
    }

    return inlineLinkAction;
  }

  function trackLink(linkEl) {
    var action = extractLinkAction(linkEl);
    var params = {text: normalizeLinkText(linkEl.innerText)};

    window.siteAnalyticsUtil.emitAction(action, params);
  }

  // Starting from `el`, traverse the DOM hierarchy
  // upward until a link is found.
  function findLinkParent(el) {
    if (el.tagName === 'A') {
      return el;
    }

    if (!el.parentNode) {
      return null;
    }

    return findLinkParent(el.parentNode);
  }

  function clickHandler(ev) {
    // If the target or its parent has analytics attributes, use
    // those to track the event instead of normal link tracking.
    if (window.siteAnalytics.hasAnalyticsAttributes(ev.target)) {
      window.siteAnalytics.trackByAttributes(ev.target);

      return;
    }

    var linkEl = findLinkParent(ev.target);

    if (!linkEl || !shouldTrack(linkEl)) {
      return;
    }

    trackLink(linkEl);
  }

  function init() {
    document.addEventListener('click', clickHandler);
  }

  init();
})();

// Emit a page view event when the document loads.

(function() {
  function trackPageView() {
    if (!shouldTrackPageView()) {
      return;
    }

    var configData = window.siteAnalyticsUtil.generalAnalyticsConfig();
    var htmlId = document.documentElement.id;

    window.siteAnalyticsUtil.emitViewed(htmlId, configData);
  }

  // Track the view if an HTML id is present,
  // and the analytics config says the view should be tracked
  function shouldTrackPageView() {
    if (!document.documentElement.id) {
      return false;
    }

    var siteAnalyticsConfig = window.siteAnalyticsUtil.siteAnalyticsConfig();

    return !!siteAnalyticsConfig.trackPageViewed;
  }

  function init() {
    if (window.siteAnalytics.pageLoadTracking) {
      return;
    }

    window.siteAnalytics.pageLoadTracking = {
      trackPageView: trackPageView
    };

    window.addEventListener('load', trackPageView);
  }

  init();
})();

// Analytics tracking for videos on site. Listens for `play` and `ended`
// events on <video> elements. For pages that use embedded players
// (like /atlas), tracking methods can be called from outside instead.

(function() {
  var videoExpandAction = 'video_expand';
  var videoEndAction = 'video_end';
  var videoPlayAction = 'video_play';

  function trackVideoExpand(video) {
    return _track(videoExpandAction, video);
  }

  function trackVideoPlay(video) {
    return _track(videoPlayAction, video);
  }

  function trackVideoEnd(video) {
    return _track(videoEndAction, video);
  }

  function _track(actionName, video) {
    var videoName = video;

    if (typeof video !== 'string') {
      videoName = extractVideoName(video);
    }

    window.siteAnalyticsUtil.emitAction(actionName, {video: videoName});
  }

  function extractSource(videoEl) {
    return videoEl.currentSrc ||
      videoEl.getAttribute('src') ||
      videoEl.querySelector('source').getAttribute('src');
  }

  // Turn a video's url into just the file name minus extension
  // (e.g. http://stripe.com/cool-video.mp4 => 'cool-video')
  function extractVideoName(videoEl) {
    var videoUrl = extractSource(videoEl);
    var fileName = videoUrl.slice(videoUrl.lastIndexOf('/') + 1);

    return fileName.slice(0, fileName.lastIndexOf('.'));
  }

  function videoPlayHandler(ev) {
    if (ev.target.tagName !== 'VIDEO') {
      return;
    }

    trackVideoPlay(ev.target);
  }

  function videoEndedHandler(ev) {
    if (ev.target.tagName !== 'VIDEO') {
      return;
    }

    trackVideoEnd(ev.target);
  }

  function init() {
    document.addEventListener('play', videoPlayHandler, true);
    document.addEventListener('ended', videoEndedHandler, true);

    window.siteAnalytics.trackVideoExpand = trackVideoExpand;
    window.siteAnalytics.trackVideoPlay = trackVideoPlay;
    window.siteAnalytics.trackVideoEnd = trackVideoEnd;
  }

  init();
})();


