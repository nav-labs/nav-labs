;(function() {
  "use strict"

  var vis = (function(){
    var stateKey,
        eventKey,
        keys = {
          hidden: "visibilitychange",
          webkitHidden: "webkitvisibilitychange",
          mozHidden: "mozvisibilitychange",
          msHidden: "msvisibilitychange"
        };
    for (stateKey in keys) {
      if (stateKey in document) {
        eventKey = keys[stateKey];
        break;
      }
    }
    return function(c) {
      if(c) document.addEventListener(eventKey, c);
      return !document[stateKey];
    }
  })();

  vis(function(){
    if(!vis()) {
      // tab is invisible
      if(animating)
        stopAnim()
    }
  });

  var intro = document.getElementById("intro")
  var closeButton

  var trackedEvents = []
  function trackOnlyOnce(eventName) {
    if(trackedEvents.indexOf(eventName) == -1) {
      if('Analytics' in window) {
        Analytics.viewed(eventName)
      }
      trackedEvents.push(eventName)
    }
  }

  if (document.body.id != "checkout") return

  if (navigator.userAgent.toLowerCase().indexOf("chrome") > -1) {
    var chrome = true,
        canvas = document.createElement("canvas"),
        ctx = canvas.getContext("2d")

    document.body.classList.add("chrome")
    intro.appendChild(canvas)
  }

  if (navigator.userAgent.match(/(iPad|iPhone|iPod)/i)) {
    document.body.classList.add("iOS")
  }

  if (navigator.userAgent.match(/android/i)) {
    document.body.classList.add("android");
  }


  if ("transition" in document.body.style)
    intro.addEventListener("click", function(e) {
      if (e.target.nodeName.toLowerCase() == "button") {
        startAnim()
        closeButton.classList.add("visible")
      }
    })
  else {
    $(document.body).addClass("no-animation loaded")
    return
  }

  function refreshCloseButton() {
    closeButton = document.getElementById("close-button")
    closeButton.addEventListener("click", function(e) {
      trackOnlyOnce('checkout_anim_stop')
      stopAnim()
      setTimeout(function() {
        scrollToContent()
      }, 1000)
      e.preventDefault()
    })
  }
  refreshCloseButton()

  window.addEventListener('scroll', function() {
    var value = $(window).scrollTop()
    if(value >= contentHeight())
      trackOnlyOnce('checkout_scroll_to_content')
  })

  function contentHeight() {
    return Math.max(660, window.innerHeight)
  }



  var navHeight = intro.getBoundingClientRect().top,
      introHeight

  function fullsizeHeader() {
    introHeight = window.innerHeight
    if (chrome)
      drawCanvas()
    else
      intro.style.height = introHeight + "px"
  }

  function drawCanvas() {
    introHeight = window.innerHeight

    // Fake min-height from CSS
    if (introHeight < 660) {
      introHeight = 660;
    }

    var canvasWidth = window.innerWidth,
        radiusWidth = canvasWidth,
        radiusHeight = introHeight * 1.5,
        startX = canvasWidth,
        startY = introHeight,
        scaleY = radiusHeight / radiusWidth,
        invScaleY = radiusWidth / radiusHeight,
        grad = ctx.createRadialGradient(startX, startY * invScaleY, 0, startX, startY * invScaleY, radiusWidth)

    canvas.width = canvasWidth
    canvas.height = introHeight

    grad.addColorStop(0,   "#FEFDFE")
    grad.addColorStop(.25, "#F8CDDA")
    grad.addColorStop(.85, "#1D2B64")
    grad.addColorStop(1,   "#0E153A")

    ctx.fillStyle = grad
    ctx.setTransform(1, 0, 0, scaleY, 0, 0)
    ctx.fillRect(0, 0, canvasWidth, introHeight * invScaleY)

  }

  if (chrome) {
    drawCanvas()
    window.addEventListener("resize", drawCanvas)
  }

  //fullsizeHeader()
  //window.addEventListener("resize", fullsizeHeader)



  // prevents chrome from playing some transitions on page load

  setTimeout(function() {
    document.body.classList.add("ready")
  }, 100)



  // fade-in on page load

  var imagesRequired = [
    "header-animation/bottom",
    "header-animation/empty-form",
    "header-animation/header",
    "hero/en_iphone",
    "hero/product-shadow"
  ],
  total = imagesRequired.length,
  loaded = 0

  var pixelRatio = 1
  if (typeof(window["devicePixelRatio"]) != "undefined")
    pixelRatio = window.devicePixelRatio

  if (pixelRatio > 1) {
    var i = total
    while (i--) imagesRequired[i] += "@2x"
  }

  (function() {
    var i = total
    while (i--) {
      var el = document.createElement("img")
      el.src = "/img/checkout/marketing/" + imagesRequired[i] + ".png"
      el.addEventListener("load", function() {
        if (total == ++loaded) document.body.classList.add("loaded")
      })
    }
  })()



  // anim

  var content = intro.querySelector(".content").cloneNode(true), startAnim, stopAnim, animating = false

  function globalAnim() {

    var timeouts = []

    // animate slide1

    function fillFields() {
      var fieldsContent = readConfig('fields_content_json'),
          placeholderClass = "placeholder",
          activeClass = "active",
          totalIterations = fieldsContent.length - 1,
          fields = document.querySelectorAll("." + placeholderClass),
          fieldsLength = fields.length,
          focusDelay = 0,
          selectedField = -1,
          animationIteration,
          input,
          content,
          animationIterations

      trackOnlyOnce('checkout_anim_slide1')

      fillNext()

      function focusField(field) {
        field.classList.remove(placeholderClass)
        field.classList.add(activeClass)
        field.textContent = ""
      }

      function blurPreviousField() {
        var i = fieldsLength
        while (i--) {
          var el = fields.item(i)
          if (el.classList.contains(activeClass)) el.classList.remove(activeClass)
        }
      }

      function fillNext() {
        blurPreviousField()
        if (selectedField == totalIterations) return
        selectedField++
        animationIteration = 0
        input = fields.item(selectedField)
        content = fieldsContent[selectedField]
        animationIterations = content.length

        focusField(input)

        if (selectedField == totalIterations) {
          timeouts.push(setTimeout(function() {
            document.querySelector(".product").classList.add("expanded")
            timeouts.push(setTimeout(function() {
              requestAnimationFrame(anim)
            }, 2000))
          }, 2000))
        }
        else
          requestAnimationFrame(anim)
      }

      function getRandomNumber(min, max) {
        return Math.random() * (max - min) + min
      }

      function anim() {
        var typeDelay = getRandomNumber(70, 120)
        timeouts.push(setTimeout(function() {
          input.textContent += content[animationIteration++]
          animationIteration < animationIterations ? requestAnimationFrame(anim) : fillNext()
        }, typeDelay))
      }
    }

    // go to slide 2

    intro.querySelector("#slide0 .tick").addEventListener("transitionend", function(e) {
      if (e.propertyName == "opacity") {
        trackOnlyOnce('checkout_anim_slide2')
        intro.classList.add("goToSlide2")
      }
    })

    // go to slide 3

    intro.querySelector("#slide2 .tick").addEventListener("transitionend", goToSlide3)

    function goToSlide3(e) {
      if (e.propertyName == "opacity") {
        trackOnlyOnce('checkout_anim_slide3')
        intro.classList.add("goToSlide3")
        timeouts.push(setTimeout(fillRegisteredEmail, 5000))
      }
    }

    var browser = intro.querySelector(".iphone .browser")

    function fillRegisteredEmail() {
      var field = browser.querySelector(".email"),
          address = "ben@stripe.com",
          i = 0,
          len = address.length
      field.classList.add("active")
      requestAnimationFrame(anim)
      function anim() {
        timeouts.push(setTimeout(function() {
          field.textContent += address[i++]
          i < len ? requestAnimationFrame(anim) : fillVerificationCode()
        }, 70))
      }
    }

    function fillVerificationCode() {
      var fields = browser.querySelectorAll(".digit"),
          code = "500840",
          i = 0,
          len = code.length
      browser.classList.add("goToVerificationCode")
      timeouts.push(setTimeout(function() {
        requestAnimationFrame(anim)
      }, 3000))
      function anim() {
        timeouts.push(setTimeout(function() {
          fields.item(i).textContent = code[i++]
          i < len ? requestAnimationFrame(anim) : goToLoggedIn()
        }, 250))
      }
    }

    function goToLoggedIn() {
      browser.classList.add("goToLoggedIn")
      browser.querySelector(".tick").addEventListener("transitionend", function(e) {
        if (e.propertyName == "opacity") goToSlide4()
      })
    }

    // go to slide 4

    var animationEnd = "animation" in document.body.style ? "animationend" : "webkitAnimationEnd"

    function goToSlide4() {
      intro.classList.add("goToSlide4")
      trackOnlyOnce('checkout_anim_slide4')

      var lastSlide = document.getElementById("slide4")

      lastSlide.querySelector("span:last-child").addEventListener("transitionend", function() {
        timeouts.push(setTimeout(function() {
          scrollToContent()
        }, 1000))
      })

      lastSlide.addEventListener("transitionend", function(e) {
        if (e.target == this) {
          trackOnlyOnce('checkout_anim_end')
          cleanUp()
        }
      })
    }

    // clean up after the animation

    function cleanUp() {
      closeButton.classList.remove("visible")
      animating = false
      intro.removeAttribute("class")
      intro.removeChild(intro.querySelector(".content"))

      var newContent = content.cloneNode(true)
      newContent.classList.add("new")
      intro.appendChild(newContent)
      refreshCloseButton()
      globalAnim()
    }

    // let the show begin

    startAnim = function() {
      if (intro.hasAttribute("class")) return
      animating = true
      trackOnlyOnce('checkout_anim_stop')
      intro.querySelector("button").blur()
      intro.className = "goToSlide1"
      timeouts.push(setTimeout(function() {
        fillFields()
        document.querySelector("#slide0 button").remove()
      }, 3200))
    }

    stopAnim = function() {
      closeButton.classList.remove("visible")
      animating = false
      for (var i = 0; i < timeouts.length; i++) {
        clearTimeout(timeouts[i])
      }
      timeouts = []

      // fade content before cleaning up
      intro.querySelector('.content').classList.add("hidden")

      // clean up
      setTimeout(function() {
        cleanUp()
      }, 600)
    }
  }

  // scroll to content

  function scrollToContent() {
    if ($("body").hasClass("iOS")) return
    if ($(window).scrollTop() == 0) {
      scrollTo(contentHeight(), 1000, easeOutFunction)
    }
  }

  // aniamted scroll

  var bezierCurve = function(x1, y1, x2, y2) {
    var curveX = function(t) {
      var v = 1 - t
      return 3 * v * v * t * x1 + 3 * v * t * t * x2 + t * t * t
    },
    curveY = function(t) {
      var v = 1 - t
      return 3 * v * v * t * y1 + 3 * v * t * t * y2 + t * t * t
    },
    derivativeCurveX = function(t) {
      var v = 1 - t
      return 3 * (2 * (t - 1) * t + v * v) * x1 + 3 * (- t * t * t + 2 * v * t) * x2
    },
    cache = {},
    cachingInterval = 0.001,
    invertCachingInterval = 1 / cachingInterval

    for (var i = 0; i <= invertCachingInterval; i += 1) {
      var t = curveX(i * cachingInterval),
          closestCachedT = Math.round(t / cachingInterval)
      cache[closestCachedT] = curveY(i * cachingInterval)
    }

    var findCachedValueAround = function(t, precision) {
      t = Math.round(t / cachingInterval)
      precision = precision * invertCachingInterval
      var originalT = t,
          y = cache[t],
          incr = 1
      while(!y) {
        t = originalT + incr
        if (Math.abs(t - originalT) > precision)
          break
        if (incr > 0)
          incr = -incr
        else
          incr = -2 * incr
        y = cache[t]
      }
      return y
    }
    return function(t, precision){
      // find closest cached value
      var y = findCachedValueAround(t, precision)
      if(!y) {
        // if not yet cached, we find it
        var t0 = 0, t1 = 1, t2 = t, x2
        while (t0 < t1) {
          x2 = curveX(t2)
          if (Math.abs(x2 - t) < precision) {
            y = curveY(t2)
            break
          }
          if (t > x2)
            t0 = t2
          else
            t1 = t2
          t2 = (t1 - t0) * .5 + t0
        }
        cache[Math.round(t / cachingInterval)] = y
      }
      return y
    }
  },

  scrollTo = function(to, duration, easingFunction) {
    var documentHeight = document.height,
        windowHeight = window.innerHeight
    if (to > documentHeight - windowHeight)
      to = documentHeight - windowHeight
    var from = root.scrollTop,
        startDate = Date.now(),
        precision = 1 / 240 / (duration / 1000)
    function scroll(timestamp) {
      var currentTime = Date.now(),
          t = Math.min(1, ((currentTime - startDate) / duration)),
          easedT = easingFunction(t, precision)
      root.scrollTop = easedT * (to - from) + from
      if (t < 1)
        requestAnimationFrame(scroll)
    }
    requestAnimationFrame(scroll)
  },

  root = /firefox/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent) ? document.documentElement : document.body,
  easeOutFunction = bezierCurve(.645, .045, .355, 1)

  // boom

  globalAnim()

})();
